# This policy uses the Sentinel tfplan/v2 import to require that
# specified AWS resources have all mandatory tags

# Import common-functions/tfplan-functions/tfplan-functions.sentinel
# with alias "plan"
import "tfplan-functions" as plan

# Import aws-functions/aws-functions.sentinel
# with alias "aws"
import "aws-functions" as aws

# List of resources that are required to have name/value tags
param resource_types default [
	"aws_ssm_maintenance_window",
	"aws_inspector_resource_group",
	"aws_datapipeline_pipeline",
	"aws_network_interface",
	"aws_storagegateway_cached_iscsi_volume",
	"aws_s3_bucket_analytics_configuration",
	"aws_wafv2_regex_pattern_set",
	"aws_api_gateway_api_key",
	"aws_ec2_transit_gateway_route_table",
	"aws_service_discovery_http_namespace",
	"aws_config_aggregate_authorization",
	"aws_vpn_gateway",
	"aws_elastic_beanstalk_application",
	"aws_default_subnet",
	"aws_datasync_location_nfs",
	"aws_codepipeline_webhook",
	"aws_elasticsearch_domain",
	"aws_elb",
	"aws_datasync_location_s3",
	"aws_redshift_subnet_group",
	"aws_wafv2_rule_group",
	"aws_appmesh_route",
	"aws_sagemaker_endpoint",
	"aws_service_discovery_service",
	"aws_ssm_patch_baseline",
	"aws_redshift_snapshot_copy_grant",
	"aws_organizations_account",
	"aws_kinesis_analytics_application",
	"aws_dx_hosted_public_virtual_interface_accepter",
	"aws_default_network_acl",
	"aws_transfer_user",
	"aws_db_security_group",
	"aws_guardduty_threatintelset",
	"aws_docdb_cluster",
	"aws_redshift_cluster",
	"aws_rds_cluster",
	"aws_ami_from_instance",
	"aws_iam_user",
	"aws_service_discovery_public_dns_namespace",
	"aws_ami",
	"aws_db_option_group",
	"aws_api_gateway_domain_name",
	"aws_default_route_table",
	"aws_waf_rule",
	"aws_codepipeline",
	"aws_opsworks_custom_layer",
	"aws_ec2_transit_gateway_peering_attachment_accepter",
	"aws_dx_public_virtual_interface",
	"aws_s3_bucket_metric",
	"aws_wafregional_web_acl",
	"aws_apigatewayv2_stage",
	"aws_gamelift_alias",
	"aws_vpn_connection",
	"aws_kinesis_firehose_delivery_stream",
	"aws_appsync_graphql_api",
	"aws_kms_key",
	"aws_sagemaker_model",
	"aws_service_discovery_private_dns_namespace",
	"aws_sfn_state_machine",
	"aws_gamelift_game_session_queue",
	"aws_apigatewayv2_domain_name",
	"aws_db_cluster_snapshot",
	"aws_api_gateway_usage_plan",
	"aws_vpc_peering_connection",
	"aws_cognito_user_pool",
	"aws_codecommit_repository",
	"aws_inspector_assessment_template",
	"aws_db_event_subscription",
	"aws_api_gateway_rest_api",
	"aws_dx_hosted_private_virtual_interface_accepter",
	"aws_docdb_cluster_instance",
	"aws_route_table",
	"aws_gamelift_build",
	"aws_db_instance",
	"aws_athena_workgroup",
	"aws_eip",
	"aws_config_configuration_aggregator",
	"aws_vpc",
	"aws_vpc_endpoint",
	"aws_globalaccelerator_accelerator",
	"aws_ecr_repository",
	"aws_route53_resolver_rule",
	"aws_default_security_group",
	"aws_storagegateway_smb_file_share",
	"aws_opsworks_java_app_layer",
	"aws_apigatewayv2_vpc_link",
	"aws_appmesh_virtual_service",
	"aws_datasync_task",
	"aws_rds_cluster_endpoint",
	"aws_dms_endpoint",
	"aws_waf_web_acl",
	"aws_elastic_beanstalk_environment",
	"aws_ssm_parameter",
	"aws_cloud9_environment_ec2",
	"aws_cloudformation_stack",
	"aws_secretsmanager_secret",
	"aws_ec2_local_gateway_route_table_vpc_association",
	"aws_neptune_event_subscription",
	"aws_codestarnotifications_notification_rule",
	"aws_config_config_rule",
	"aws_datasync_location_smb",
	"aws_dx_connection",
	"aws_redshift_parameter_group",
	"aws_lb_target_group",
	"aws_ebs_snapshot",
	"aws_media_package_channel",
	"aws_api_gateway_client_certificate",
	"aws_workspace",
	"aws_ssm_activation",
	"aws_iam_role",
	"aws_iam_policy",
	"aws_waf_rate_based_rule",
	"aws_dx_hosted_transit_virtual_interface_accepter",
	"aws_route53_health_check",
	"aws_emr_cluster",
	"aws_cognito_identity_pool",
	"aws_elasticache_cluster",
	"aws_wafv2_ip_set",
	"aws_redshift_snapshot_schedule",
	"aws_network_acl",
	"aws_dx_lag",
	"aws_kinesis_stream",
	"aws_ec2_transit_gateway",
	"aws_route53_zone",
	"aws_instance",
	"aws_batch_compute_environment",
	"aws_ecs_service",
	"aws_docdb_cluster_parameter_group",
	"aws_ec2_transit_gateway_vpc_attachment_accepter",
	"aws_opsworks_php_app_layer",
	"aws_lb",
	"aws_lambda_function",
	"aws_ec2_transit_gateway_peering_attachment",
	"aws_msk_cluster",
	"aws_apigatewayv2_api",
	"aws_key_pair",
	"aws_codebuild_project",
	"aws_eks_cluster",
	"aws_ec2_capacity_reservation",
	"aws_sagemaker_endpoint_configuration",
	"aws_s3_bucket_object",
	"aws_vpc_peering_connection_accepter",
	"aws_ec2_traffic_mirror_target",
	"aws_transfer_server",
	"aws_datasync_location_efs",
	"aws_dax_cluster",
	"aws_cloudwatch_event_rule",
	"aws_ssm_document",
	"aws_kms_external_key",
	"aws_glue_crawler",
	"aws_dms_replication_task",
	"aws_subnet",
	"aws_cloudformation_stack_set",
	"aws_licensemanager_license_configuration",
	"aws_dx_private_virtual_interface",
	"aws_guardduty_ipset",
	"aws_dms_replication_subnet_group",
	"aws_appmesh_mesh",
	"aws_lightsail_instance",
	"aws_acm_certificate",
	"aws_ec2_traffic_mirror_session",
	"aws_spot_fleet_request",
	"aws_waf_rule_group",
	"aws_ec2_transit_gateway_vpc_attachment",
	"aws_efs_file_system",
	"aws_iot_topic_rule",
	"aws_qldb_ledger",
	"aws_rds_cluster_instance",
	"aws_efs_access_point",
	"aws_default_vpc",
	"aws_eks_node_group",
	"aws_sfn_activity",
	"aws_ebs_volume",
	"aws_api_gateway_vpc_link",
	"aws_elasticache_replication_group",
	"aws_s3_bucket",
	"aws_opsworks_static_web_layer",
	"aws_customer_gateway",
	"aws_opsworks_rails_app_layer",
	"aws_glacier_vault",
	"aws_flow_log",
	"aws_nat_gateway",
	"aws_wafv2_web_acl",
	"aws_workspaces_directory",
	"aws_opsworks_nodejs_app_layer",
	"aws_gamelift_fleet",
	"aws_glue_job",
	"aws_docdb_subnet_group",
	"aws_ec2_client_vpn_endpoint",
	"aws_backup_plan",
	"aws_eks_fargate_profile",
	"aws_rds_cluster_parameter_group",
	"aws_datasync_agent",
	"aws_cloudtrail",
	"aws_kinesis_video_stream",
	"aws_accessanalyzer_analyzer",
	"aws_neptune_cluster_parameter_group",
	"aws_security_group",
	"aws_neptune_cluster_instance",
	"aws_sqs_queue",
	"aws_storagegateway_gateway",
	"aws_ecs_cluster",
	"aws_route53_resolver_endpoint",
	"aws_db_subnet_group",
	"aws_media_convert_queue",
	"aws_ami_copy",
	"aws_backup_vault",
	"aws_fsx_lustre_file_system",
	"aws_cloudwatch_log_group",
	"aws_acmpca_certificate_authority",
	"aws_ec2_fleet",
	"aws_resourcegroups_group",
	"aws_directory_service_directory",
	"aws_default_vpc_dhcp_options",
	"aws_launch_template",
	"aws_mq_configuration",
	"aws_media_store_container",
	"aws_ec2_traffic_mirror_filter",
	"aws_neptune_subnet_group",
	"aws_cloudhsm_v2_cluster",
	"aws_swf_domain",
	"aws_opsworks_ganglia_layer",
	"aws_appmesh_virtual_node",
	"aws_wafregional_rule",
	"aws_sagemaker_notebook_instance",
	"aws_ram_resource_share",
	"aws_neptune_cluster",
	"aws_vpc_endpoint_service",
	"aws_ecs_task_definition",
	"aws_pinpoint_app",
	"aws_vpc_dhcp_options",
	"aws_opsworks_stack",
	"aws_fsx_windows_file_system",
	"aws_storagegateway_nfs_file_share",
	"aws_wafregional_rule_group",
	"aws_servicecatalog_portfolio",
	"aws_ecs_capacity_provider",
	"aws_opsworks_memcached_layer",
	"aws_wafregional_rate_based_rule",
	"aws_db_parameter_group",
	"aws_internet_gateway",
	"aws_dx_transit_virtual_interface",
	"aws_appmesh_virtual_router",
	"aws_ebs_snapshot_copy",
	"aws_cloudwatch_metric_alarm",
	"aws_opsworks_haproxy_layer",
	"aws_elastic_beanstalk_application_version",
	"aws_neptune_parameter_group",
	"aws_glue_trigger",
	"aws_db_snapshot",
	"aws_opsworks_mysql_layer",
	"aws_mq_broker",
	"aws_redshift_event_subscription",
	"aws_spot_instance_request",
	"aws_api_gateway_stage",
	"aws_dms_replication_instance",
	"aws_egress_only_internet_gateway",
	"aws_dynamodb_table",
	"aws_dlm_lifecycle_policy",
	"aws_guardduty_detector",
	"aws_sns_topic",
	"aws_placement_group",
]

# List of mandatory tags
# Note that the tags here are for internal HashiCorp usage
# You should assign your own tags in a "mandatory_tags" parameter in your policy set
# Or change the tags here in the policy.
param mandatory_tags default ["ManagedByTFE"]

# Get all AWS Resources with standard tags
allAWSResourcesWithStandardTags =
                          aws.find_resources_with_standard_tags(resource_types)

# Filter to AWS resources with violations
# Warnings will be printed for all violations since the last parameter is true
violatingAWSResourcesTag =
        plan.filter_attribute_not_contains_list(allAWSResourcesWithStandardTags,
                        "tags", mandatory_tags, true)

violatingAWSResourcesTagAll =
        plan.filter_attribute_not_contains_list(allAWSResourcesWithStandardTags,
                        "tags_all", mandatory_tags, true)

print("tag", length(violatingAWSResourcesTag["messages"]))
print("tag_all", length(violatingAWSResourcesTagAll["messages"]))
print ("Scanned for tag and tag_all field. If the resource isn't present in any of them, Policy will FAIL")

# Main rule
main = rule {
  (length(violatingAWSResourcesTag["messages"]) is 0 or length(violatingAWSResourcesTagAll["messages"]) is 0)
}
